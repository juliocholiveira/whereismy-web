{"version":3,"sources":["services/api.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["dotenv","config","baseURL","console","log","process","api","axios","create","App","latitudeGeral","longitudeGeral","sendPosition","user","latitude","longitude","a","post","navigator","geolocation","getCurrentPosition","position","coords","err","alert","timeout","watchPosition","setInterval","className","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qRAGAA,EAAOC,SAEP,IAAIC,EAAU,2CAKdC,QAAQC,IAAIC,cACZF,QAAQC,IAAIF,GAEZ,IAIeI,EAJHC,IAAMC,OAAO,CACvBN,Y,MCoCaO,MA7Cf,WAEE,IAAIC,EACAC,EAHS,SAKEC,EALF,kFAKb,WAA4BC,EAAcC,EAAkBC,GAA5D,SAAAC,EAAA,6DACEN,EAAgBI,EAChBH,EAAiBI,EAFnB,SAIQT,EAAIW,KAAK,YAAa,CAC1BJ,OACAC,WACAC,cAPJ,4CALa,sBAsCb,OAtBAG,UAAUC,YAAYC,oBACpB,SAACC,GAAc,IAAD,EACoBA,EAASC,OACzCV,EAAa,SAFD,EACJE,SADI,EACMC,cAGpB,SAACQ,GACCC,MAAMD,KAER,CACEE,QAAS,MAIbP,UAAUC,YAAYO,eAAc,SAACL,GAAc,IAAD,EAChBA,EAASC,OACzCV,EAAa,SAFmC,EACxCE,SADwC,EAC9BC,cAIpBY,aAAY,WACVf,EAAa,SAAUF,EAAeC,KACrC,KAGD,yBAAKiB,UAAU,OACb,4BAAQC,IAAI,gCCjCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBrB,WACrBA,UAAUsB,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.7b7d60c4.chunk.js","sourcesContent":["import axios from \"axios\";\n\nimport dotenv from 'dotenv';\ndotenv.config();\n\nlet baseURL = 'https://where-are-you-back.herokuapp.com';\nif (process.env.NODE_ENV === 'development') {\n  baseURL = 'http://192.168.1.30:5000';\n}\n\nconsole.log(process.env.NODE_ENV);\nconsole.log(baseURL);\n\nconst api = axios.create({\n  baseURL,\n});\n\nexport default api;","import React, { useEffect, useState } from 'react';\nimport api from './services/api';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n\n  let latitudeGeral: number;\n  let longitudeGeral: number;\n\n  async function sendPosition(user: string, latitude: number, longitude: number){\n    latitudeGeral = latitude;\n    longitudeGeral = longitude;\n\n    await api.post('/location', {\n      user,\n      latitude,\n      longitude\n    });\n  }\n\n  navigator.geolocation.getCurrentPosition(\n    (position) => {\n      const { latitude, longitude } = position.coords;\n      sendPosition('curPos', latitude, longitude);\n    },\n    (err) => {\n      alert(err);\n    },\n    {\n      timeout: 30000,\n    }\n  );\n\n  navigator.geolocation.watchPosition((position) => {\n    const { latitude, longitude } = position.coords;\n    sendPosition('watPos', latitude, longitude);\n  });\n\n  setInterval(() => {\n    sendPosition('ctrPos', latitudeGeral, longitudeGeral);\n  }, 10000);\n\n  return (\n    <div className=\"App\">\n      <iframe src=\"https://www.w3schools.com\"></iframe>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}